import React from 'react';
import Typography from "@material-ui/core/Typography";
import Dialog from "@material-ui/core/Dialog";
import DialogTitle from "@material-ui/core/DialogTitle";
import DialogContent from "@material-ui/core/DialogContent";
import DialogContentText from "@material-ui/core/DialogContentText";
import DialogActions from "@material-ui/core/DialogActions";
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import Icon from "@material-ui/core/Icon";
import ErrorDialog from "../../error/ErrorDialog";
import {connect} from 'react-redux'
import * as collectionActions from '../../../actions/collections'

class CollectionEditor extends React.Component{
    constructor(props) {
        super(props);
        this.onDidChangeDetails = props.onDidChangeDetails;

        this.state = {
            title: props.title,
            name: props.name || '',
            description: props.description || '',
            editing: false
        };
    }

    componentWillReceiveProps(props) {
        this.setState({
            title: props.title,
            name: props.name || '',
            description: props.description || '',
            editing: false
        });
    }

    close() {
        this.setState({editing: false});
    }

    storeChangedDetails(collectionId, parameters) {
        // Update information about the name and collection
        return this.props.updateCollection(collectionId, parameters.name, parameters.description)
    }

    handleCancel() {
        this.resetValues();
        this.closeEditDialog();
    }

    handleChangeDetails() {
        this.closeEditDialog();

        this.storeChangedDetails(this.state.collection.id, this.state.editValues)
            .then(() => {
                let collection = Object.assign(this.state.collection, this.state.editValues);

                if(this.onDidChangeDetails) {
                    this.onDidChangeDetails(collection);
                }
            })
            .catch(e => ErrorDialog.showError(e, "An error occurred while updating collection metadata"));
    }

    handleInputChange(event) {
        this.setState({[event.target.name]: event.target.value});
    }

    render() {
        return (<Dialog
                open={this.state.editing}
                onClose={this.closeEditDialog.bind(this)}
                aria-labelledby="form-dialog-title"
            >
                <DialogTitle id="form-dialog-title">{this.state.title}</DialogTitle>
                <DialogContent>
                    <DialogContentText>
                        You can edit the collection name and description here.
                    </DialogContentText>
                    <TextField
                        autoFocus
                        margin="dense"
                        id="name"
                        label="Name"
                        value={this.state.name}
                        name="name"
                        onChange={this.handleInputChange.bind(this)}
                        fullWidth
                    />
                    <TextField
                        autoFocus
                        margin="dense"
                        multiline={true}
                        id="description"
                        label="Description"
                        name="description"
                        value={this.state.description}
                        onChange={this.handleInputChange.bind(this)}
                        fullWidth
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={this.handleCancel.bind(this)} color="secondary">
                        Cancel
                    </Button>
                    <Button onClick={this.handleChangeDetails.bind(this)} color="primary">
                        Save
                    </Button>
                </DialogActions>
            </Dialog>
        );
    }
}

const mapStateToProps = null
const mapDispatchToProps = {
    ...collectionActions
}

export default connect(mapStateToProps, mapDispatchToProps)(CollectionEditor);




